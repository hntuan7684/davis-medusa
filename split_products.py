import json
import requests
import argparse
import time
import os
from pathlib import Path

# URL v√† Headers
SWIFTPOD_API_BASE = "http://localhost:9000/app/products"

SWIFTPOD_HEADERS = {
    "accept": "*/*",
    "accept-language": "en,en-US;q=0.9,vi;q=0.8",
    "origin": "http://localhost:9000/app",
    "referer": "http://localhost:9000/app/",
    "sec-ch-ua": '"Microsoft Edge";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "Windows",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0"
}

SLUG_PRODUCT = [
    "gildan-5000",
    "comfort-color-1717",
    "bella-3001", 
    "gildan-18000",
    "gildan-18500",
    "gildan-64000",
    "gildan-5000l",
    "gildan-5000b",
    "nextlevel-6210",
    "next-level-3600",
]


def fetch_swiftpod_collection(product_type, limit=50):
    """L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ SwiftPod API theo trang"""
    page = 1
    all_products = []
    
    while True:
        print(f"üîç ƒêang l·∫•y trang {page} cho lo·∫°i s·∫£n ph·∫©m: {product_type}")
        url = f"{SWIFTPOD_API_BASE}/search?page={page}&limit={limit}&product_type={product_type}"
        
        try:
            response = requests.get(url, headers=SWIFTPOD_HEADERS)
            response.raise_for_status()
            collection_data = response.json()
            
            # L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi
            products = collection_data.get("products", {}).get("data", [])
            
            if not products:
                print(f"‚úÖ ƒê√£ l·∫•y xong t·∫•t c·∫£ s·∫£n ph·∫©m ({len(all_products)} s·∫£n ph·∫©m)")
                break
                
            all_products.extend(products)
            print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m t·ª´ trang {page}")
            
            # Ki·ªÉm tra xem c√≥ trang ti·∫øp theo kh√¥ng
            next_page = collection_data.get("products", {}).get("next_page_url")
            if not next_page:
                print(f"‚úÖ ƒê√£ l·∫•y xong t·∫•t c·∫£ s·∫£n ph·∫©m ({len(all_products)} s·∫£n ph·∫©m)")
                break
                
            page += 1
            # T·∫°m d·ª´ng m·ªôt ch√∫t ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
            time.sleep(1)
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ SwiftPod: {e}")
            break
    
    return all_products

def fetch_product_detail(slug):
    """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt s·∫£n ph·∫©m d·ª±a tr√™n slug"""
    print(f"üîç ƒêang l·∫•y th√¥ng tin chi ti·∫øt cho s·∫£n ph·∫©m: {slug}")
    url = f"{SWIFTPOD_API_BASE}/products/{slug}?client=true"
    
    try:
        response = requests.get(url, headers=SWIFTPOD_HEADERS)
        response.raise_for_status()
        product_data = response.json()
        print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt cho s·∫£n ph·∫©m: {product_data.get('name', 'Unknown')}")
        return product_data
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m {slug}: {e}")
        return None

def split_products_into_chunks(products, chunk_size=20):
    """Chia danh s√°ch s·∫£n ph·∫©m th√†nh c√°c ph·∫ßn nh·ªè h∆°n"""
    for i in range(0, len(products), chunk_size):
        yield products[i:i + chunk_size]

def main():
    parser = argparse.ArgumentParser(description="L·∫•y v√† chia nh·ªè s·∫£n ph·∫©m t·ª´ SwiftPod API th√†nh c√°c file JSON")
    parser.add_argument("--product-type", help="Lo·∫°i s·∫£n ph·∫©m c·∫ßn l·∫•y (v√≠ d·ª•: mugs, tshirts)")
    parser.add_argument("--limit", type=int, default=50, help="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói trang")
    parser.add_argument("--chunk-size", type=int, default=20, help="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong m·ªói file JSON")
    parser.add_argument("--output-dir", default="products_data", help="Th∆∞ m·ª•c ƒë·∫ßu ra ch·ª©a c√°c file JSON")
    parser.add_argument("--slugs", nargs="+", help="Danh s√°ch c√°c slug c·∫ßn l·∫•y d·ªØ li·ªáu (v√≠ d·ª•: gildan-64000 comfort-color-1717)")
    parser.add_argument("--slugdetail", action="store_true", help="L·∫•y d·ªØ li·ªáu chi ti·∫øt c·ªßa t·∫•t c·∫£ c√°c slug trong SLUG_PRODUCT")
    args = parser.parse_args()
    
    # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    output_dir = Path(args.output_dir)
    if not output_dir.exists():
        output_dir.mkdir(parents=True)
    
    detailed_products = []
    
    if args.slugdetail:
        # L·∫•y d·ªØ li·ªáu chi ti·∫øt c·ªßa t·∫•t c·∫£ c√°c slug trong SLUG_PRODUCT
        print(f"üöÄ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu chi ti·∫øt cho {len(SLUG_PRODUCT)} slug t·ª´ SLUG_PRODUCT")
        
        for index, slug in enumerate(SLUG_PRODUCT):
            print(f"\n[{index+1}/{len(SLUG_PRODUCT)}] ƒêang x·ª≠ l√Ω slug: {slug}")
            detailed_product = fetch_product_detail(slug)
            
            if detailed_product:
                detailed_products.append(detailed_product)
            
            # T·∫°m d·ª´ng gi·ªØa c√°c s·∫£n ph·∫©m ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
            if index < len(SLUG_PRODUCT) - 1:
                print("‚è±Ô∏è ƒêang t·∫°m d·ª´ng 1 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω s·∫£n ph·∫©m ti·∫øp theo...")
                time.sleep(1)
        
        # L∆∞u k·∫øt qu·∫£ v√†o file JSON
        output_file = output_dir / "slugdetailco.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(detailed_products, f, ensure_ascii=False, indent=2)
        print(f"\n‚úÖ ƒê√£ ho√†n th√†nh! ƒê√£ l∆∞u d·ªØ li·ªáu chi ti·∫øt c·ªßa {len(detailed_products)} s·∫£n ph·∫©m v√†o file: {output_file}")
        return
    
    if not args.product_type:
        print("‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh lo·∫°i s·∫£n ph·∫©m (--product-type) ho·∫∑c s·ª≠ d·ª•ng --slugdetail")
        return
    
    print(f"üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y v√† chia nh·ªè s·∫£n ph·∫©m lo·∫°i: {args.product_type}")
    
    if args.slugs:
        # N·∫øu c√≥ ch·ªâ ƒë·ªãnh slugs, ch·ªâ l·∫•y d·ªØ li·ªáu c·ªßa c√°c slug ƒë√≥
        print(f"üìã ƒêang l·∫•y d·ªØ li·ªáu cho {len(args.slugs)} slug ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh")
        for index, slug in enumerate(args.slugs):
            print(f"\n[{index+1}/{len(args.slugs)}] ƒêang x·ª≠ l√Ω slug: {slug}")
            detailed_product = fetch_product_detail(slug)
            
            if detailed_product:
                detailed_products.append(detailed_product)
            
            # T·∫°m d·ª´ng gi·ªØa c√°c s·∫£n ph·∫©m ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
            if index < len(args.slugs) - 1:
                print("‚è±Ô∏è ƒêang t·∫°m d·ª´ng 1 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω s·∫£n ph·∫©m ti·∫øp theo...")
                time.sleep(1)
    else:
        # N·∫øu kh√¥ng c√≥ ch·ªâ ƒë·ªãnh slugs, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m nh∆∞ c≈©
        # B∆∞·ªõc 1: L·∫•y danh s√°ch s·∫£n ph·∫©m
        products = fetch_swiftpod_collection(args.product_type, args.limit)
        
        if not products:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o, k·∫øt th√∫c ch∆∞∆°ng tr√¨nh")
            return
        
        # L∆∞u to√†n b·ªô s·∫£n ph·∫©m v√†o m·ªôt file JSON
        full_products_file = output_dir / f"{args.product_type}_all_products.json"
        with open(full_products_file, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        print(f"üíæ ƒê√£ l∆∞u t·∫•t c·∫£ {len(products)} s·∫£n ph·∫©m v√†o file: {full_products_file}")
        
        # B∆∞·ªõc 2: L·∫•y th√¥ng tin chi ti·∫øt cho m·ªói s·∫£n ph·∫©m
        for index, product in enumerate(products):
            print(f"\n[{index+1}/{len(products)}] ƒêang x·ª≠ l√Ω: {product['name']}")
            detailed_product = fetch_product_detail(product['slug'])
            
            if detailed_product:
                detailed_products.append(detailed_product)
            
            # T·∫°m d·ª´ng gi·ªØa c√°c s·∫£n ph·∫©m ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
            if index < len(products) - 1:
                print("‚è±Ô∏è ƒêang t·∫°m d·ª´ng 1 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω s·∫£n ph·∫©m ti·∫øp theo...")
                time.sleep(1)
    
    if not detailed_products:
        print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt c·ªßa s·∫£n ph·∫©m n√†o, k·∫øt th√∫c ch∆∞∆°ng tr√¨nh")
        return
    
    # L∆∞u to√†n b·ªô s·∫£n ph·∫©m chi ti·∫øt v√†o m·ªôt file JSON
    full_detailed_file = output_dir / f"{args.product_type}_all_detailed.json"
    with open(full_detailed_file, 'w', encoding='utf-8') as f:
        json.dump(detailed_products, f, ensure_ascii=False, indent=2)
    print(f"üíæ ƒê√£ l∆∞u t·∫•t c·∫£ {len(detailed_products)} s·∫£n ph·∫©m chi ti·∫øt v√†o file: {full_detailed_file}")
    
    # B∆∞·ªõc 3: Chia nh·ªè s·∫£n ph·∫©m th√†nh c√°c file JSON
    chunks = list(split_products_into_chunks(detailed_products, args.chunk_size))
    
    for i, chunk in enumerate(chunks):
        chunk_file = output_dir / f"{args.product_type}_chunk_{i+1}.json"
        with open(chunk_file, 'w', encoding='utf-8') as f:
            json.dump(chunk, f, ensure_ascii=False, indent=2)
        print(f"üíæ ƒê√£ l∆∞u {len(chunk)} s·∫£n ph·∫©m v√†o file chunk: {chunk_file}")
    
    print(f"\n‚úÖ ƒê√£ ho√†n th√†nh! ƒê√£ chia {len(detailed_products)} s·∫£n ph·∫©m th√†nh {len(chunks)} file chunk")
    print(f"üìÅ C√°c file ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: {output_dir}")

if __name__ == "__main__":
    main() 